package v1.ch04;

/**
 * 本章主要讲述 面向对象程序设计与编写
 * @author niuzhihuan
 */
public class 对象与类 {
	/**
	 * 类
	 * 对象
	 * 识别类
	 * 类之间的关系
	 */
	public void 面向对象程序设计概述() {
	}
	/**
	 * 对象与对象变量
	 * Java类库中的LocalDate类
	 * 更改器方法与访问器方法
	 */
	public void 使用预定义类() {
	}
	/**
	 * Employee类
	 * 多个源文件的使用
	 * 剖析Employee类
	 * 从构造器开始
	 * 隐式参数与显式参数
	 * 封装的优点
	 * 基于类的访问权限
	 * 私有方法
	 * final实例域
	 */
	public void 用户自定义类() {
	}
	/**
	 * 静态域
	 * 静态常量
	 * 静态方法
	 * 工厂方法
	 * main方法
	 */
	public void 静态域与静态方法() {
	}
	/**
	 * 按值调用，按引用调用，Java程序设计语言采用按值调用。
	 */
	public void 方法参数() {
	}
	/**
	 * 定义对象的初始状态
	 * 重载
	 * 默认域初始化
	 * 无参数的构造器
	 * 显式域初始化
	 * 参数名
	 * 调用另一个构造器
	 * 初始化块
	 * 对象析构与finalize方法
	 */
	public void 对象构造() {
	}
	/**
	 * 包用于将类组织起来。
	 * 类的导入
	 * 静态导入：导入静态方法静态域
	 * 将类放入包中
	 * 包作用域
	 */
	public void 包() {
	}
	/**
	 * 类路径必须与包名匹配
	 * 设置类路径
	 */
	public void 类路径() {
	}
	/**
	 * javadoc可以由源文件生成一个HTML文档。
	 * 注释的插入
	 * 类注释
	 * 包与概述注释
	 * 注释的抽取
	 */
	public void 文档注释() {
	}
	/**
	 * 一定要保证数据私有
	 * 一定要对数据初始化
	 * 不要在类中使用过多的基本类型
	 * 不是所有的域都需要域访问器和域修改器
	 * 将职责过多的类进行分解
	 * 类名和方法名要能够体现它们的职责
	 * 优先使用不可变的类
	 */
	public void 类设计技巧() {
	}
}
